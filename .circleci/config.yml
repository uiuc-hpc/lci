docker_default: &docker_default
  docker:
    - image: ubuntu:latest

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  install_dependencies:
    <<: *docker_default
    working_directory: /lci
    resource_class: small
    steps:
      - run:
          name: Install dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y git cmake ninja-build libfabric-bin libfabric-dev openmpi-bin openmpi-common openmpi-doc libopenmpi-dev clang-format python3-pip
            pip install --upgrade cmake-format
      - run:
          name: Verify installations
          command: |
            cmake --version
            ninja --version
            mpicc --version
            mpirun --version
            fi_info --version
    
  checkout_code:
    <<: *docker_default
    working_directory: /lci
    resource_class: small
    steps:
      - checkout:
          path: /lci/source-full
      # Make a shallow clone of the current commit so that we don't have to copy
      # the whole repository between work steps.
      - run:
          name: Creating shallow clone
          command: |
            git clone --depth=1 file:///lci/source-full source
      - persist_to_workspace:
          root: /lci
          paths:
            - ./source

  # Ensure that the modules stay clang-formatted and camke-formatted
  code_format:
    <<: *docker_default
    working_directory: /lci/source
    steps:
      - attach_workspace:
          at: /lci
      - run:
          name: Check that the source code is well clang-formatted
          command: |
            chmod +x ./format.sh
            ./format.sh
            git diff --exit-code > /tmp/format_results.txt
      - store_artifacts:
          path: /tmp/format_results.txt
          destination: /lci/artifacts/format_results.txt

  configure:
    <<: *docker_default
    working_directory: /lci/build
    resource_class: small
    steps:
      - attach_workspace:
          at: /lci
      - run:
          name: Running CMake Configure
          command: |
            cmake \
                -S /lci/source \
                -B /lci/build \
                -GNinja \
                -DCMAKE_BUILD_TYPE=Debug \
                -DLCI_DEBUG=ON \
                -DLCI_NETWORK_BACKENDS=ofi,ibv \
                -DLCT_PMI_BACKEND_ENABLE_MPI=ON \
                -DLCI_USE_CTEST_ARGS="--oversubscribe"
                
      - persist_to_workspace:
          root: /lci
          paths:
            - ./build

  build:
    <<: *docker_default
    working_directory: /lci/build
    resource_class: small
    steps:
      - attach_workspace:
          at: /lci
      - run:
          name: Running CMake Build
          command: |
            cmake --build /lci/build --target all
      - persist_to_workspace:
          root: /lci
          paths:
            - ./build

  ctest:
    <<: *docker_default
    working_directory: /lci/build
    resource_class: medium
    steps:
      - attach_workspace:
          at: /lci
      - run:
          name: Running CTest excluding LCIT tests
          command: |
            ulimit -c unlimited
            export LCT_PMI_BACKEND=local
            ctest --extra-verbose --timeout 180 \
                  --test-dir /lci/build \
                  --output-junit ctest.out.xml
      - store_test_results:
          path: /lci/build/ctest.out.xml

workflows:
  version: 2
  build-and-test:
    jobs:
      - install_dependencies
      - checkout_code:
          requires:
            - install_dependencies
      - code_format:
          requires:
            - checkout_code
      - configure:
          requires:
            - checkout_code
      - build:
          requires:
            - configure
      - ctest:
          requires:
            - build