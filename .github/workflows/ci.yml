name: CI

on:
  push:
    branches: [ "master", "lci2" ]
  pull_request:
    branches: [ "master", "lci2" ]

jobs:
  format-code:
    runs-on: ubuntu-latest
    name: Check Code Formatting

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update && sudo apt install -y clang-format python3-pip
          pip install --upgrade cmake-format

      - name: Run Format Check
        run: |
          ./format.sh
          git diff --exit-code > /tmp/format_results.txt

      - name: Display Format Check Results
        if: always()
        run: |
          cat /tmp/format_results.txt

      - name: Upload Format Check Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: format-check-results
          path: /tmp/format_results.txt

  build-and-test:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
    name: Build and Test (${{ matrix.build_type }})

    steps:
      - uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libfabric-bin libfabric-dev openmpi-bin openmpi-common openmpi-doc libopenmpi-dev

      - name: Verify Installation
        run: |
          cmake --version
          ninja --version
          mpicc --version
          mpirun --version
          fi_info --version

      - name: Configure
        shell: bash
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
            cmake \
                -Bbuild \
                -GNinja \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -DLCI_DEBUG=ON \
                -DLCI_NETWORK_BACKENDS=ofi,ibv \
                -DLCT_PMI_BACKEND_ENABLE_MPI=ON \
                -DLCI_USE_CTEST_ARGS="--oversubscribe" \
                .

      - name: Build
        shell: bash
        # Build your program with the given configuration
        run: |
            cmake --build build --target all

      - name: Test
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
            cd build
            export LCT_PMI_BACKEND=local
            ctest --extra-verbose --timeout 120